// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20230602212704_LetsTryThisAgain")]
    partial class LetsTryThisAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Server.Models.Alliance", b =>
                {
                    b.Property<int>("AllianceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AllianceId");

                    b.ToTable("alliances");
                });

            modelBuilder.Entity("Server.Models.Expansion", b =>
                {
                    b.Property<int>("ExpansionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ExpansionId");

                    b.ToTable("expansions");
                });

            modelBuilder.Entity("Server.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExpansionId")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Lng")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotosphereUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ZoneId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ZoneId1")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("AllianceId");

                    b.HasIndex("ExpansionId");

                    b.HasIndex("ZoneId1");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Server.Models.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Lng")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ZoneId");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("Server.Models.Location", b =>
                {
                    b.HasOne("Server.Models.Alliance", "Alliance")
                        .WithMany("Locations")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Expansion", "Expansion")
                        .WithMany("Locations")
                        .HasForeignKey("ExpansionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Zone", "Zone")
                        .WithMany("Locations")
                        .HasForeignKey("ZoneId1");

                    b.Navigation("Alliance");

                    b.Navigation("Expansion");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Server.Models.Alliance", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Server.Models.Expansion", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Server.Models.Zone", b =>
                {
                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
